


import datetime
import time

import pymysql
import requests
from lxml import etree
import json
from queue import Queue
import threading
from requests.exceptions import RequestException




from retrying import retry

def retry_if_io_error(exception):
    return isinstance(exception, ZeroDivisionError)






'''
1. 创建 URL队列, 响应队列, 数据队列 在init方法中
2. 在生成URL列表中方法中,把URL添加URL队列中
3. 在请求页面的方法中,从URL队列中取出URL执行,把获取到的响应数据添加响应队列中
4. 在处理数据的方法中,从响应队列中取出页面内容进行解析, 把解析结果存储数据队列中
5. 在保存数据的方法中, 从数据队列中取出数据,进行保存
6. 开启几个线程来执行上面的方法
'''

def run_forever(func):
    def wrapper(obj):
        while True:
            func(obj)
    return wrapper


def RemoveDot(item):
    f_l = []
    for it in item:

        f_str = "".join(it.split(","))
        ff_str = f_str +"00"
        f_l.append(ff_str)

    return f_l

def remove_douhao(num):
    num1 = "".join(num.split(","))
    f_num = str(num1)
    return f_num
def remove_block(items):
    new_items = []
    for it in items:
        f = "".join(it.split())
        new_items.append(f)
    return new_items


class JSPool_M(object):

    def __init__(self,url):
        self.url = url

    def page_request(self):
        ''' 发送请求获取数据 '''
        headers = {
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.139 Safari/537.36'
        }

        response = requests.get(self.url,headers=headers)
        if response.status_code == 200:
            html = response.text
            return html
        else:
            pass

    def page_parse_(self):
        '''根据页面内容使用lxml解析数据, 获取段子列表'''


        html  = self.page_request()
        element = etree.HTML(html)

        now_price = element.xpath(
            '//*[@id="layout"]/div[2]/div[3]/div[2]/div/div[1]/div/div/div[1]/div[2]/div/div[2]/div/text()')
        f_price = RemoveDot(remove_block(now_price))
        big_list.append(f_price[0])
        return big_list




def insertDB(content):
    connection = pymysql.connect(host='127.0.0.1', port=3306, user='root', password='123456', db='JS_Mons',
                                 charset='utf8mb4', cursorclass=pymysql.cursors.DictCursor)

    cursor = connection.cursor()

    try:
        # 用一个列表解析
        f_jsp = ["J" + str(cod) for cod in jl]
        sp_func = lambda x: ",".join(x)
        f_lcode = sp_func(f_jsp)

        f_ls = "%s," * len(jl)# 这里错了
        cursor.executemany('insert into sp_LJ ({0}) values ({1})'.format(f_lcode, f_ls[:-1]), content)
        connection.commit()
        connection.commit()
        connection.close()
        print('向MySQL中添加数据成功！')
    except TypeError:
        pass








if __name__ == '__main__':
    jl = [3880,3863,4519,4568,4578,3941,6754,8111,4523,3107,7974,7518,5857,8356,8524,9783,3141,4768,1973,8056,9697,4528,3148,8934,1949,9787,9792,6376,1946,7532,3254,7224,9987,8358,2281,3626,7419,3349,2811,3003,8923,3635,4307,9749,4088,4739,9449,8424,3549,1942,7649,8584,3064,6028,8905,8425,8593,9934,4921,2331,4684,2127,8439,9435,2264,1893,9086,8194,6370,7912,8804,2702,2327,8892,1944,2413,6750,7947,6005,7550,8279,4527,1721,9719,1414,1979,4751,4321,3244,9956,3167,6361,2371,8096,5929,2810,8341,8133,8368,9436,3391,3288,9143,9869,9843,6436,7459,2784,8830,1417,9364,6976,2337,9075,9069,8802,4911,4023,6960,2201,4516,8850,2269,9072,3088,4021,1969,4555,2801,7309,3231,1803,8935,3382,6849,6141,6841,9065,2427,2229,8331,1925,9744,4816,9681,6845,1860,7250,4452,4540,8218,8252,6235,7741,1820,2602,9433,9039,8032,4553,7516,8282,1878,4063,9509,1961,4967,4206,8876,4503,8066,7180,8355,2267,3050,2001,3289,1879,2670,6395,2815,9302,8566,1802,4628,1951,1959,8015,2292,7864,4732,7012,2809,9301,3861,7167,4471,1861,6367,3659,6952,6703,9605,9048,6674,2502,6981,8074,9375,1824,8078,4403,4849,9076,4507,3132,8098,7701,5351,7832,1881,6448,4694,8020,9001,9022,5233,1720,6098,9045,4061,7451,7984,7846,4186,6857,6762,5302,6340,5393,6869,4612,9008,6465,9009,3738,5352,2531,4901,2914,9810,9613,2181,7189,7230,2593,6861,4912,6457,7956,1963,8393,6136,6134,3407,4401,2433,6412,9003,3612,9042,6013,7177,6432,7747,5703,9948,8173,5304,9021,3932,9678,7202,7606,4044,9007,4927,8473,2768,4680,9024,7951,5631,9616,4922,9064,6113,8035,3228,4819,8012,4676,6302,8113,4661,9062,4536,7867,6371,6383,7274,7013,9006,9041,9699,6856,5301,6305,6504,6641,2730,4928,8051,4004,7105,2681,7205,9104,6301,5851,5201,4681,9766,7729,4151,3436,6498,6417,9983,9201,6724,4028,6103,7246,7287,3099,5970,7751,7296,6923,2497,6101,9706,7732,6481,7717,6135,4902,7148,7731,8354]

    big_list = []


    for it in jl:
        url = 'https://minkabu.jp/stock/{0}'.format(it)
        print(url)
        jsp = JSPool_M(url)# 这里把请求和解析都进行了处理
        jsp.page_parse_()
    ff_l = []
    f_tup = tuple(big_list)
    ff_l.append((f_tup))
    print(ff_l)
    insertDB(ff_l)























#  drop table sp_LJ;
# create table sp_LJ(id int not null primary key auto_increment, J3880 FLOAT,J3863 FLOAT,J4519 FLOAT,J4568 FLOAT,J4578 FLOAT,J3941 FLOAT,J6754 FLOAT,J8111 FLOAT,J4523 FLOAT,J3107 FLOAT,J7974 FLOAT,J7518 FLOAT,J5857 FLOAT,J8356 FLOAT,J8524 FLOAT,J9783 FLOAT,J3141 FLOAT,J4768 FLOAT,J1973 FLOAT,J8056 FLOAT,J9697 FLOAT,J4528 FLOAT,J3148 FLOAT,J8934 FLOAT,J1949 FLOAT,J9787 FLOAT,J9792 FLOAT,J6376 FLOAT,J1946 FLOAT,J7532 FLOAT,J3254 FLOAT,J7224 FLOAT,J9987 FLOAT,J8358 FLOAT,J2281 FLOAT,J3626 FLOAT,J7419 FLOAT,J3349 FLOAT,J2811 FLOAT,J3003 FLOAT,J8923 FLOAT,J3635 FLOAT,J4307 FLOAT,J9749 FLOAT,J4088 FLOAT,J4739 FLOAT,J9449 FLOAT,J8424 FLOAT,J3549 FLOAT,J1942 FLOAT,J7649 FLOAT,J8584 FLOAT,J3064 FLOAT,J6028 FLOAT,J8905 FLOAT,J8425 FLOAT,J8593 FLOAT,J9934 FLOAT,J4921 FLOAT,J2331 FLOAT,J4684 FLOAT,J2127 FLOAT,J8439 FLOAT,J9435 FLOAT,J2264 FLOAT,J1893 FLOAT,J9086 FLOAT,J8194 FLOAT,J6370 FLOAT,J7912 FLOAT,J8804 FLOAT,J2702 FLOAT,J2327 FLOAT,J8892 FLOAT,J1944 FLOAT,J2413 FLOAT,J6750 FLOAT,J7947 FLOAT,J6005 FLOAT,J7550 FLOAT,J8279 FLOAT,J4527 FLOAT,J1721 FLOAT,J9719 FLOAT,J1414 FLOAT,J1979 FLOAT,J4751 FLOAT,J4321 FLOAT,J3244 FLOAT,J9956 FLOAT,J3167 FLOAT,J6361 FLOAT,J2371 FLOAT,J8096 FLOAT,J5929 FLOAT,J2810 FLOAT,J8341 FLOAT,J8133 FLOAT,J8368 FLOAT,J9436 FLOAT,J3391 FLOAT,J3288 FLOAT,J9143 FLOAT,J9869 FLOAT,J9843 FLOAT,J6436 FLOAT,J7459 FLOAT,J2784 FLOAT,J8830 FLOAT,J1417 FLOAT,J9364 FLOAT,J6976 FLOAT,J2337 FLOAT,J9075 FLOAT,J9069 FLOAT,J8802 FLOAT,J4911 FLOAT,J4023 FLOAT,J6960 FLOAT,J2201 FLOAT,J4516 FLOAT,J8850 FLOAT,J2269 FLOAT,J9072 FLOAT,J3088 FLOAT,J4021 FLOAT,J1969 FLOAT,J4555 FLOAT,J2801 FLOAT,J7309 FLOAT,J3231 FLOAT,J1803 FLOAT,J8935 FLOAT,J3382 FLOAT,J6849 FLOAT,J6141 FLOAT,J6841 FLOAT,J9065 FLOAT,J2427 FLOAT,J2229 FLOAT,J8331 FLOAT,J1925 FLOAT,J9744 FLOAT,J4816 FLOAT,J9681 FLOAT,J6845 FLOAT,J1860 FLOAT,J7250 FLOAT,J4452 FLOAT,J4540 FLOAT,J8218 FLOAT,J8252 FLOAT,J6235 FLOAT,J7741 FLOAT,J1820 FLOAT,J2602 FLOAT,J9433 FLOAT,J9039 FLOAT,J8032 FLOAT,J4553 FLOAT,J7516 FLOAT,J8282 FLOAT,J1878 FLOAT,J4063 FLOAT,J9509 FLOAT,J1961 FLOAT,J4967 FLOAT,J4206 FLOAT,J8876 FLOAT,J4503 FLOAT,J8066 FLOAT,J7180 FLOAT,J8355 FLOAT,J2267 FLOAT,J3050 FLOAT,J2001 FLOAT,J3289 FLOAT,J1879 FLOAT,J2670 FLOAT,J6395 FLOAT,J2815 FLOAT,J9302 FLOAT,J8566 FLOAT,J1802 FLOAT,J4628 FLOAT,J1951 FLOAT,J1959 FLOAT,J8015 FLOAT,J2292 FLOAT,J7864 FLOAT,J4732 FLOAT,J7012 FLOAT,J2809 FLOAT,J9301 FLOAT,J3861 FLOAT,J7167 FLOAT,J4471 FLOAT,J1861 FLOAT,J6367 FLOAT,J3659 FLOAT,J6952 FLOAT,J6703 FLOAT,J9605 FLOAT,J9048 FLOAT,J6674 FLOAT,J2502 FLOAT,J6981 FLOAT,J8074 FLOAT,J9375 FLOAT,J1824 FLOAT,J8078 FLOAT,J4403 FLOAT,J4849 FLOAT,J9076 FLOAT,J4507 FLOAT,J3132 FLOAT,J8098 FLOAT,J7701 FLOAT,J5351 FLOAT,J7832 FLOAT,J1881 FLOAT,J6448 FLOAT,J4694 FLOAT,J8020 FLOAT,J9001 FLOAT,J9022 FLOAT,J5233 FLOAT,J1720 FLOAT,J6098 FLOAT,J9045 FLOAT,J4061 FLOAT,J7451 FLOAT,J7984 FLOAT,J7846 FLOAT,J4186 FLOAT,J6857 FLOAT,J6762 FLOAT,J5302 FLOAT,J6340 FLOAT,J5393 FLOAT,J6869 FLOAT,J4612 FLOAT,J9008 FLOAT,J6465 FLOAT,J9009 FLOAT,J3738 FLOAT,J5352 FLOAT,J2531 FLOAT,J4901 FLOAT,J2914 FLOAT,J9810 FLOAT,J9613 FLOAT,J2181 FLOAT,J7189 FLOAT,J7230 FLOAT,J2593 FLOAT,J6861 FLOAT,J4912 FLOAT,J6457 FLOAT,J7956 FLOAT,J1963 FLOAT,J8393 FLOAT,J6136 FLOAT,J6134 FLOAT,J3407 FLOAT,J4401 FLOAT,J2433 FLOAT,J6412 FLOAT,J9003 FLOAT,J3612 FLOAT,J9042 FLOAT,J6013 FLOAT,J7177 FLOAT,J6432 FLOAT,J7747 FLOAT,J5703 FLOAT,J9948 FLOAT,J8173 FLOAT,J5304 FLOAT,J9021 FLOAT,J3932 FLOAT,J9678 FLOAT,J7202 FLOAT,J7606 FLOAT,J4044 FLOAT,J9007 FLOAT,J4927 FLOAT,J8473 FLOAT,J2768 FLOAT,J4680 FLOAT,J9024 FLOAT,J7951 FLOAT,J5631 FLOAT,J9616 FLOAT,J4922 FLOAT,J9064 FLOAT,J6113 FLOAT,J8035 FLOAT,J3228 FLOAT,J4819 FLOAT,J8012 FLOAT,J4676 FLOAT,J6302 FLOAT,J8113 FLOAT,J4661 FLOAT,J9062 FLOAT,J4536 FLOAT,J7867 FLOAT,J6371 FLOAT,J6383 FLOAT,J7274 FLOAT,J7013 FLOAT,J9006 FLOAT,J9041 FLOAT,J9699 FLOAT,J6856 FLOAT,J5301 FLOAT,J6305 FLOAT,J6504 FLOAT,J6641 FLOAT,J2730 FLOAT,J4928 FLOAT,J8051 FLOAT,J4004 FLOAT,J7105 FLOAT,J2681 FLOAT,J7205 FLOAT,J9104 FLOAT,J6301 FLOAT,J5851 FLOAT,J5201 FLOAT,J4681 FLOAT,J9766 FLOAT,J7729 FLOAT,J4151 FLOAT,J3436 FLOAT,J6498 FLOAT,J6417 FLOAT,J9983 FLOAT,J9201 FLOAT,J6724 FLOAT,J4028 FLOAT,J6103 FLOAT,J7246 FLOAT,J7287 FLOAT,J3099 FLOAT,J5970 FLOAT,J7751 FLOAT,J7296 FLOAT,J6923 FLOAT,J2497 FLOAT,J6101 FLOAT,J9706 FLOAT,J7732 FLOAT,J6481 FLOAT,J7717 FLOAT,J6135 FLOAT,J4902 FLOAT,J7148 FLOAT,J7731 FLOAT,J8354 FLOAT, LastTime timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP ) engine=InnoDB  charset=utf8;




